syntax="proto3";

package imrpc;

option go_package = "github.com/longhorn/types/pkg/generated/imrpc";

import "google/protobuf/empty.proto";
import "imrpc/common.proto";
import "imrpc/imrpc.proto";

service InstanceService {
	rpc InstanceCreate(InstanceCreateRequest) returns (InstanceResponse) {}
	rpc InstanceDelete(InstanceDeleteRequest) returns (InstanceResponse) {}
	rpc InstanceGet(InstanceGetRequest) returns (InstanceResponse) {}
	rpc InstanceList(google.protobuf.Empty) returns (InstanceListResponse) {}
	rpc InstanceLog(InstanceLogRequest) returns (stream LogResponse) {}
	rpc InstanceWatch(google.protobuf.Empty) returns (stream google.protobuf.Empty) {}
	rpc InstanceReplace(InstanceReplaceRequest) returns (InstanceResponse) {}
	rpc InstanceSuspend(InstanceSuspendRequest) returns (google.protobuf.Empty) {}
	rpc InstanceResume(InstanceResumeRequest) returns (google.protobuf.Empty) {}
	rpc InstanceSwitchOverTarget(InstanceSwitchOverTargetRequest) returns (google.protobuf.Empty) {}
	rpc InstanceDeleteTarget(InstanceDeleteTargetRequest) returns (google.protobuf.Empty) {}

	rpc LogSetLevel(LogSetLevelRequest) returns (google.protobuf.Empty);
	rpc LogSetFlags(LogSetFlagsRequest) returns (google.protobuf.Empty);
	rpc LogGetLevel(LogGetLevelRequest) returns (LogGetLevelResponse);
	rpc LogGetFlags(LogGetFlagsRequest) returns (LogGetFlagsResponse);

	rpc VersionGet(google.protobuf.Empty) returns (VersionResponse);
}

message ProcessInstanceSpec {
	string binary = 1;
	repeated string args = 2;
}

message SpdkInstanceSpec {
	map<string, string> replica_address_map = 1;
	string disk_name = 2;
	string disk_uuid = 3;
	uint64 size = 4;
	bool expose_required = 5;
	string frontend = 6;
	bool salvage_requested = 7;
}

message InstanceSpec {
	// Deprecated: Replaced by `data_engine`.
	BackendStoreDriver backend_store_driver = 1 [deprecated=true];
	string name = 2;
	string type = 3;
	string volume_name = 4;

	int32 port_count = 5;
	repeated string port_args = 6;

	ProcessInstanceSpec process_instance_spec = 7;
	SpdkInstanceSpec spdk_instance_spec = 8;
	DataEngine data_engine = 9;

	bool upgrade_required = 10;
	string initiator_address = 11;
	string target_address = 12;
}

message InstanceStatus {
	string state = 1;
	string error_msg = 2;
	int32 port_start = 3;
	int32 port_end = 4;
	map<string, bool> conditions = 5;
	int32 target_port_start = 6;
	int32 target_port_end = 7;
}

message InstanceCreateRequest {
	InstanceSpec spec = 1;
}

message InstanceDeleteRequest {
	// Deprecated: Replaced by `data_engine`.
	BackendStoreDriver backend_store_driver = 1 [deprecated=true];
	string name = 2;
	string type = 3;

	string disk_uuid = 4;
	bool cleanup_required = 5;
	DataEngine data_engine = 6;
}

message InstanceGetRequest {
	// Deprecated: Replaced by `data_engine`.
	BackendStoreDriver backend_store_driver = 1 [deprecated=true];
	string name = 2;
	string type = 3;
	DataEngine data_engine = 4;
}

message InstanceResponse {
	InstanceSpec spec = 1;
	InstanceStatus status = 2;
	bool deleted = 3;
}

message InstanceListResponse{
	map<string, InstanceResponse> instances = 1;
}

message InstanceLogRequest {
	// Deprecated: Replaced by `data_engine`.
	BackendStoreDriver backend_store_driver = 1 [deprecated=true];
	string name = 2;
	string type = 3;
	DataEngine data_engine = 4;
}

message InstanceReplaceRequest {
	InstanceSpec spec = 1;
	string terminate_signal = 2;
}

message InstanceSuspendRequest {
	DataEngine data_engine = 1;
	string name = 2;
	string type = 3;
}

message InstanceResumeRequest {
	DataEngine data_engine = 1;
	string name = 2;
	string type = 3;
}

message InstanceSwitchOverTargetRequest {
	DataEngine data_engine = 1;
	string name = 2;
	string type = 3;
	string target_address = 4;
}

message InstanceDeleteTargetRequest {
	DataEngine data_engine = 1;
	string name = 2;
	string type = 3;
}

message LogSetLevelRequest {
	DataEngine data_engine = 1;
	string level = 2;
}

message LogSetFlagsRequest {
	DataEngine data_engine = 1;
	string flags = 2;
}

message LogGetLevelRequest {
	DataEngine data_engine = 1;
}

message LogGetLevelResponse {
	string level = 1;
}

message LogGetFlagsRequest {
	DataEngine data_engine = 1;
}

message LogGetFlagsResponse {
	string flags = 1;
}
